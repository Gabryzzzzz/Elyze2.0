// <auto-generated />
using System;
using Elyze.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Elyze.Migrations
{
    [DbContext(typeof(ElyzeContext))]
    [Migration("20230502114128_InserimentiReDesignFix3")]
    partial class InserimentiReDesignFix3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Elyze.Data.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("Data_Creazione")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<DateTime>("DataSpegnimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("Data_Spegnimento")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdArea")
                        .HasColumnType("int")
                        .HasComment("Con 'IdLingua' forma la chiave composta della tabella");

                    b.Property<int>("IdIconaArea")
                        .HasColumnType("int")
                        .HasComment("Le aree hanno una sola icona, quindi la relazione è uno a uno");

                    b.Property<int>("IdLingua")
                        .HasColumnType("int");

                    b.Property<bool>("Stato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))")
                        .HasComment("Attiva o non attiva");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdIconaArea");

                    b.HasIndex("IdLingua");

                    b.ToTable("Area", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.AreaIcons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Base64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AreaIcons");
                });

            modelBuilder.Entity("Elyze.Data.AreaSDG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdArea")
                        .HasColumnType("int");

                    b.Property<int>("IdSdg")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdSdg");

                    b.ToTable("AreaSDG");
                });

            modelBuilder.Entity("Elyze.Data.CampiMa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FineValidita")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCampoMa")
                        .HasColumnType("int");

                    b.Property<int>("IdMicroArea")
                        .HasColumnType("int");

                    b.Property<int>("IdTipologia")
                        .HasColumnType("int");

                    b.Property<int>("IdUDM")
                        .HasColumnType("int");

                    b.Property<DateTime>("InizioValidita")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdMicroArea");

                    b.HasIndex("IdTipologia");

                    b.HasIndex("IdUDM");

                    b.ToTable("CampiMa", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.Gri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CodiceGri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataSpegnimento")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Stato")
                        .HasColumnType("bit");

                    b.Property<string>("Titolo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Gri", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.Gruppo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Attivo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Gruppo", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.Inserimenti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdCampo")
                        .HasColumnType("int");

                    b.Property<int>("IdInserimento")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ValoreCampo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValoreValidato")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Inserimenti", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.InserimentiFissi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DataFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataInserimento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataValidazione")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdInserimento")
                        .HasColumnType("int");

                    b.Property<int>("IdMicroArea")
                        .HasColumnType("int");

                    b.Property<int>("RepartoId")
                        .HasColumnType("int");

                    b.Property<int>("SocietaId")
                        .HasColumnType("int");

                    b.Property<int?>("Stato")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UtenteId")
                        .HasColumnType("int");

                    b.Property<int?>("ValidatoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdMicroArea");

                    b.ToTable("InserimentiFissi");
                });

            modelBuilder.Entity("Elyze.Data.Lingue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiglaEstesa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Lingue", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.MicroArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("Data_Creazione")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<DateTime>("DataSpegnimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("Data_Spegnimento")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdArea")
                        .HasColumnType("int");

                    b.Property<int>("IdGri")
                        .HasColumnType("int")
                        .HasColumnName("Id_Gri");

                    b.Property<int>("IdMicroArea")
                        .HasColumnType("int");

                    b.Property<string>("NomeTabella")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nome_Tabella")
                        .HasColumnOrder(2);

                    b.Property<bool>("Stato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdGri");

                    b.ToTable("MicroArea", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.OperatoreDiConversione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FattoreDiConversione")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int?>("IdOperazione")
                        .HasColumnType("int");

                    b.Property<int?>("IdUnitaDiMisuraArrivo")
                        .HasColumnType("int");

                    b.Property<int?>("IdUnitaDiMisuraPartenza")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdOperazione" }, "IX_OperatoreDiConversione_IdOperazione");

                    b.HasIndex(new[] { "IdUnitaDiMisuraArrivo" }, "IX_OperatoreDiConversione_IdUnitaDiMisuraArrivo");

                    b.HasIndex(new[] { "IdUnitaDiMisuraPartenza" }, "IX_OperatoreDiConversione_IdUnitaDiMisuraPartenza");

                    b.ToTable("OperatoreDiConversione", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.Operazione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatoreDiConversione")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Operazione", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descrizione = "",
                            OperatoreDiConversione = "+"
                        },
                        new
                        {
                            Id = 2,
                            Descrizione = "",
                            OperatoreDiConversione = "-"
                        },
                        new
                        {
                            Id = 3,
                            Descrizione = "",
                            OperatoreDiConversione = "/"
                        },
                        new
                        {
                            Id = 4,
                            Descrizione = "",
                            OperatoreDiConversione = "*"
                        });
                });

            modelBuilder.Entity("Elyze.Data.Reparto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Attivo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StabilimentoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Reparto", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.Repository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titolo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Repository", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.SDG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Base64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SDG");
                });

            modelBuilder.Entity("Elyze.Data.Sede", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Attivo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsoNazione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SedeN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SocietaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ValutaId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SocietaId");

                    b.HasIndex("ValutaId");

                    b.ToTable("Sede", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.Societa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Attivo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("CodiceIsoNazione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GruppoId")
                        .HasColumnType("int");

                    b.Property<string>("Nazione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sede")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("GruppoId");

                    b.ToTable("Societa");
                });

            modelBuilder.Entity("Elyze.Data.StatoSchede", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatoSchede", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.TipologieCampiMicroArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipologieCampiMicroArea");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descrizione = "",
                            Nome = "Decimal"
                        },
                        new
                        {
                            Id = 2,
                            Descrizione = "",
                            Nome = "Integer"
                        },
                        new
                        {
                            Id = 3,
                            Descrizione = "",
                            Nome = "Text"
                        });
                });

            modelBuilder.Entity("Elyze.Data.UnitaMisura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Simbolo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnitaMisura", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<bool?>("Admin")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("Attivo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("Cognome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.UserArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdArea")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserArea", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.UserConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdArea")
                        .HasColumnType("int")
                        .HasColumnName("Id_Area");

                    b.Property<int>("IdGruppo")
                        .HasColumnType("int")
                        .HasColumnName("Id_Gruppo");

                    b.Property<int>("IdPlant")
                        .HasColumnType("int")
                        .HasColumnName("Id_Plant");

                    b.Property<int>("IdReparto")
                        .HasColumnType("int")
                        .HasColumnName("Id_Reparto");

                    b.Property<int>("IdSocieta")
                        .HasColumnType("int")
                        .HasColumnName("Id_Societa");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("Id_User");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserConfig", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.UserGruppo", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("GruppoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId", "GruppoId");

                    b.HasIndex(new[] { "GruppoId" }, "IX_UserGruppo_GruppoId");

                    b.ToTable("UserGruppo", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.UserReparto", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RepartoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId", "RepartoId");

                    b.HasIndex(new[] { "RepartoId" }, "IX_UserReparto_RepartoId");

                    b.ToTable("UserReparto", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.UserSede", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SedeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId", "SedeId");

                    b.HasIndex(new[] { "SedeId" }, "IX_UserSede_SedeId");

                    b.ToTable("UserSede", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.UserSocieta", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SocietaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId", "SocietaId");

                    b.HasIndex(new[] { "SocietaId" }, "IX_UserSocieta_SocietaId");

                    b.ToTable("UserSocieta", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.Valuta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Simbolo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Valuta", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.Area", b =>
                {
                    b.HasOne("Elyze.Data.AreaIcons", "IdIconaAreaNavigation")
                        .WithMany()
                        .HasForeignKey("IdIconaArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.Lingue", "IdLinguaNavigation")
                        .WithMany()
                        .HasForeignKey("IdLingua")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdIconaAreaNavigation");

                    b.Navigation("IdLinguaNavigation");
                });

            modelBuilder.Entity("Elyze.Data.AreaSDG", b =>
                {
                    b.HasOne("Elyze.Data.Area", "IdAreaNavigation")
                        .WithMany()
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.SDG", "IdSdgNavigation")
                        .WithMany()
                        .HasForeignKey("IdSdg")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdAreaNavigation");

                    b.Navigation("IdSdgNavigation");
                });

            modelBuilder.Entity("Elyze.Data.CampiMa", b =>
                {
                    b.HasOne("Elyze.Data.MicroArea", "IdMicroAreaNavigation")
                        .WithMany()
                        .HasForeignKey("IdMicroArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.TipologieCampiMicroArea", "IdTipologiaNavigation")
                        .WithMany()
                        .HasForeignKey("IdTipologia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.UnitaMisura", "IdUDMNavigation")
                        .WithMany()
                        .HasForeignKey("IdUDM")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdMicroAreaNavigation");

                    b.Navigation("IdTipologiaNavigation");

                    b.Navigation("IdUDMNavigation");
                });

            modelBuilder.Entity("Elyze.Data.InserimentiFissi", b =>
                {
                    b.HasOne("Elyze.Data.MicroArea", "IdMicroAreaNavigation")
                        .WithMany()
                        .HasForeignKey("IdMicroArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdMicroAreaNavigation");
                });

            modelBuilder.Entity("Elyze.Data.MicroArea", b =>
                {
                    b.HasOne("Elyze.Data.Area", "IdAreaNavigation")
                        .WithMany()
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.Gri", "IdGriNavigation")
                        .WithMany()
                        .HasForeignKey("IdGri")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdAreaNavigation");

                    b.Navigation("IdGriNavigation");
                });

            modelBuilder.Entity("Elyze.Data.OperatoreDiConversione", b =>
                {
                    b.HasOne("Elyze.Data.Operazione", "IdOperazioneNavigation")
                        .WithMany("OperatoreDiConversioneIdOperazione")
                        .HasForeignKey("IdOperazione")
                        .HasConstraintName("FK_OperatoreDiConversione_UnitaMisura_Operazione");

                    b.HasOne("Elyze.Data.UnitaMisura", "IdUnitaDiMisuraArrivoNavigation")
                        .WithMany("OperatoreDiConversioneIdUnitaDiMisuraArrivoNavigations")
                        .HasForeignKey("IdUnitaDiMisuraArrivo")
                        .HasConstraintName("FK_OperatoreDiConversione_UnitaMisura_Arrivo");

                    b.HasOne("Elyze.Data.UnitaMisura", "IdUnitaDiMisuraPartenzaNavigation")
                        .WithMany("OperatoreDiConversioneIdUnitaDiMisuraPartenzaNavigations")
                        .HasForeignKey("IdUnitaDiMisuraPartenza")
                        .HasConstraintName("FK_OperatoreDiConversione_UnitaMisura_Partenza");

                    b.Navigation("IdOperazioneNavigation");

                    b.Navigation("IdUnitaDiMisuraArrivoNavigation");

                    b.Navigation("IdUnitaDiMisuraPartenzaNavigation");
                });

            modelBuilder.Entity("Elyze.Data.Sede", b =>
                {
                    b.HasOne("Elyze.Data.Societa", "SocietaIdNavigation")
                        .WithMany()
                        .HasForeignKey("SocietaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.Valuta", "ValutaIdNavigation")
                        .WithMany()
                        .HasForeignKey("ValutaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocietaIdNavigation");

                    b.Navigation("ValutaIdNavigation");
                });

            modelBuilder.Entity("Elyze.Data.Societa", b =>
                {
                    b.HasOne("Elyze.Data.Gruppo", "GruppoIdNavigation")
                        .WithMany()
                        .HasForeignKey("GruppoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GruppoIdNavigation");
                });

            modelBuilder.Entity("Elyze.Data.UserGruppo", b =>
                {
                    b.HasOne("Elyze.Data.Gruppo", "Gruppo")
                        .WithMany("UserGruppos")
                        .HasForeignKey("GruppoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.User", "User")
                        .WithMany("UserGruppos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gruppo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Elyze.Data.UserReparto", b =>
                {
                    b.HasOne("Elyze.Data.Reparto", "Reparto")
                        .WithMany("UserRepartos")
                        .HasForeignKey("RepartoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.User", "User")
                        .WithMany("UserRepartos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reparto");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Elyze.Data.UserSede", b =>
                {
                    b.HasOne("Elyze.Data.Sede", "Sede")
                        .WithMany("UserSedes")
                        .HasForeignKey("SedeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.User", "User")
                        .WithMany("UserSedes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sede");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Elyze.Data.UserSocieta", b =>
                {
                    b.HasOne("Elyze.Data.Societa", "Societa")
                        .WithMany("UserSocieta")
                        .HasForeignKey("SocietaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.User", "User")
                        .WithMany("UserSocieta")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Societa");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Elyze.Data.Gruppo", b =>
                {
                    b.Navigation("UserGruppos");
                });

            modelBuilder.Entity("Elyze.Data.Operazione", b =>
                {
                    b.Navigation("OperatoreDiConversioneIdOperazione");
                });

            modelBuilder.Entity("Elyze.Data.Reparto", b =>
                {
                    b.Navigation("UserRepartos");
                });

            modelBuilder.Entity("Elyze.Data.Sede", b =>
                {
                    b.Navigation("UserSedes");
                });

            modelBuilder.Entity("Elyze.Data.Societa", b =>
                {
                    b.Navigation("UserSocieta");
                });

            modelBuilder.Entity("Elyze.Data.UnitaMisura", b =>
                {
                    b.Navigation("OperatoreDiConversioneIdUnitaDiMisuraArrivoNavigations");

                    b.Navigation("OperatoreDiConversioneIdUnitaDiMisuraPartenzaNavigations");
                });

            modelBuilder.Entity("Elyze.Data.User", b =>
                {
                    b.Navigation("UserGruppos");

                    b.Navigation("UserRepartos");

                    b.Navigation("UserSedes");

                    b.Navigation("UserSocieta");
                });
#pragma warning restore 612, 618
        }
    }
}
