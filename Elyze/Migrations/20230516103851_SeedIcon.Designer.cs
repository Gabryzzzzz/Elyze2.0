// <auto-generated />
using System;
using Elyze.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Elyze.Migrations
{
    [DbContext(typeof(ElyzeContext))]
    [Migration("20230516103851_SeedIcon")]
    partial class SeedIcon
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Elyze.Data.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("Data_Creazione")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<DateTime>("DataSpegnimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("Data_Spegnimento")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdArea")
                        .HasColumnType("int")
                        .HasComment("Con 'IdLingua' forma la chiave composta della tabella");

                    b.Property<int>("IdIconaArea")
                        .HasColumnType("int")
                        .HasComment("Le aree hanno una sola icona, quindi la relazione è uno a uno");

                    b.Property<int>("IdLingua")
                        .HasColumnType("int");

                    b.Property<bool>("Stato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))")
                        .HasComment("Attiva o non attiva");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdIconaArea");

                    b.HasIndex("IdLingua");

                    b.ToTable("Area", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.AreaIcons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AreaIcons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codice = "01",
                            Descrizione = "Acqua",
                            LocalPath = "{0}/acqua.{1}"
                        },
                        new
                        {
                            Id = 2,
                            Codice = "02",
                            Descrizione = "Emissioni",
                            LocalPath = "{0}/emissioni.{1}"
                        },
                        new
                        {
                            Id = 3,
                            Codice = "03",
                            Descrizione = "Energia",
                            LocalPath = "{0}/energia.{1}"
                        },
                        new
                        {
                            Id = 4,
                            Codice = "04",
                            Descrizione = "Finanza",
                            LocalPath = "{0}/finanza.{1}"
                        },
                        new
                        {
                            Id = 5,
                            Codice = "05",
                            Descrizione = "Innovazione",
                            LocalPath = "{0}/innovazione.{1}"
                        },
                        new
                        {
                            Id = 6,
                            Codice = "06",
                            Descrizione = "Logistica",
                            LocalPath = "{0}/logistica.{1}"
                        },
                        new
                        {
                            Id = 7,
                            Codice = "07",
                            Descrizione = "Persone",
                            LocalPath = "{0}/persone.{1}"
                        },
                        new
                        {
                            Id = 8,
                            Codice = "08",
                            Descrizione = "Rifiuti",
                            LocalPath = "{0}/rifiuti.{1}"
                        },
                        new
                        {
                            Id = 9,
                            Codice = "09",
                            Descrizione = "Salute",
                            LocalPath = "{0}/salute.{1}"
                        },
                        new
                        {
                            Id = 10,
                            Codice = "10",
                            Descrizione = "Sito produttivo",
                            LocalPath = "{0}/sito-produttivo.{1}"
                        });
                });

            modelBuilder.Entity("Elyze.Data.AreaSDG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdArea")
                        .HasColumnType("int");

                    b.Property<int>("IdSdg")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdSdg");

                    b.ToTable("AreaSDG");
                });

            modelBuilder.Entity("Elyze.Data.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool?>("Attivo")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Elyze.Data.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FileBase64String")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("Elyze.Data.CampiMa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FineValidita")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCampoMa")
                        .HasColumnType("int");

                    b.Property<int>("IdMicroArea")
                        .HasColumnType("int");

                    b.Property<int>("IdTipologia")
                        .HasColumnType("int");

                    b.Property<int>("IdUDM")
                        .HasColumnType("int");

                    b.Property<DateTime>("InizioValidita")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdMicroArea");

                    b.HasIndex("IdTipologia");

                    b.HasIndex("IdUDM");

                    b.ToTable("CampiMa", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.Gri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CodiceGri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataSpegnimento")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Stato")
                        .HasColumnType("bit");

                    b.Property<string>("Titolo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Gri", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodiceGri = "201-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 201 Performance economiche 2016"
                        },
                        new
                        {
                            Id = 2,
                            CodiceGri = "201-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 201 Performance economiche 2016"
                        },
                        new
                        {
                            Id = 3,
                            CodiceGri = "201-3",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 201 Performance economiche 2016"
                        },
                        new
                        {
                            Id = 4,
                            CodiceGri = "201-4",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 201 Performance economiche 2016"
                        },
                        new
                        {
                            Id = 5,
                            CodiceGri = "202-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 202 Presenza sul mercato 2016"
                        },
                        new
                        {
                            Id = 6,
                            CodiceGri = "202-3",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 202 Presenza sul mercato 2016"
                        },
                        new
                        {
                            Id = 7,
                            CodiceGri = "203-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 203 Impatti economici indiretti 2016"
                        },
                        new
                        {
                            Id = 8,
                            CodiceGri = "203-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 203 Impatti economici indiretti 2016"
                        },
                        new
                        {
                            Id = 9,
                            CodiceGri = "204-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 204 Prassi di approvvigionamento 2016"
                        },
                        new
                        {
                            Id = 10,
                            CodiceGri = "205-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 205 Anticorruzione 2016"
                        },
                        new
                        {
                            Id = 11,
                            CodiceGri = "205-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 205 Anticorruzione 2016"
                        },
                        new
                        {
                            Id = 12,
                            CodiceGri = "205-3",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 205 Anticorruzione 2016"
                        },
                        new
                        {
                            Id = 13,
                            CodiceGri = "206-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 206 Comportamento anticoncorrenziale 2016"
                        },
                        new
                        {
                            Id = 14,
                            CodiceGri = "207-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 207 Tasse 2019"
                        },
                        new
                        {
                            Id = 15,
                            CodiceGri = "207-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 207 Tasse 2019"
                        },
                        new
                        {
                            Id = 16,
                            CodiceGri = "207-3",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 207 Tasse 2019"
                        },
                        new
                        {
                            Id = 17,
                            CodiceGri = "207-4",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 207 Tasse 2019"
                        },
                        new
                        {
                            Id = 18,
                            CodiceGri = "301-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 301 Materiali 2016"
                        },
                        new
                        {
                            Id = 19,
                            CodiceGri = "301-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 301 Materiali 2016"
                        },
                        new
                        {
                            Id = 20,
                            CodiceGri = "301-3",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 301 Materiali 2016"
                        },
                        new
                        {
                            Id = 21,
                            CodiceGri = "302-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 302 Energia 2016"
                        },
                        new
                        {
                            Id = 22,
                            CodiceGri = "302-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 302 Energia 2016"
                        },
                        new
                        {
                            Id = 23,
                            CodiceGri = "302-3",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 302 Energia 2016"
                        },
                        new
                        {
                            Id = 24,
                            CodiceGri = "302-4",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 302 Energia 2016"
                        },
                        new
                        {
                            Id = 25,
                            CodiceGri = "302-5",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 302 Energia 2016"
                        },
                        new
                        {
                            Id = 26,
                            CodiceGri = "303-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 303 Acqua ed effluenti 2018"
                        },
                        new
                        {
                            Id = 27,
                            CodiceGri = "303-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 303 Acqua ed effluenti 2018"
                        },
                        new
                        {
                            Id = 28,
                            CodiceGri = "303-3",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 303 Acqua ed effluenti 2018"
                        },
                        new
                        {
                            Id = 29,
                            CodiceGri = "303-4",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 303 Acqua ed effluenti 2018"
                        },
                        new
                        {
                            Id = 30,
                            CodiceGri = "303-5",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 303 Acqua ed effluenti 2018"
                        },
                        new
                        {
                            Id = 31,
                            CodiceGri = "304-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 304 Biodiversità 2016"
                        },
                        new
                        {
                            Id = 32,
                            CodiceGri = "304-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 304 Biodiversità 2016"
                        },
                        new
                        {
                            Id = 33,
                            CodiceGri = "304-3",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 304 Biodiversità 2016"
                        },
                        new
                        {
                            Id = 34,
                            CodiceGri = "304-4",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 304 Biodiversità 2016"
                        },
                        new
                        {
                            Id = 35,
                            CodiceGri = "305-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 305 Emissioni 2016"
                        },
                        new
                        {
                            Id = 36,
                            CodiceGri = "305-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 305 Emissioni 2016"
                        },
                        new
                        {
                            Id = 37,
                            CodiceGri = "305-3",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 305 Emissioni 2016"
                        },
                        new
                        {
                            Id = 38,
                            CodiceGri = "305-4",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 305 Emissioni 2016"
                        },
                        new
                        {
                            Id = 39,
                            CodiceGri = "305-5",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 305 Emissioni 2016"
                        },
                        new
                        {
                            Id = 40,
                            CodiceGri = "305-6",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 305 Emissioni 2016"
                        },
                        new
                        {
                            Id = 41,
                            CodiceGri = "305-7",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 305 Emissioni 2016"
                        },
                        new
                        {
                            Id = 42,
                            CodiceGri = "306-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 306 Rifiuti 2020"
                        },
                        new
                        {
                            Id = 43,
                            CodiceGri = "306-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 306 Rifiuti 2020"
                        },
                        new
                        {
                            Id = 44,
                            CodiceGri = "306-3 (2020)",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 306 Rifiuti 2020"
                        },
                        new
                        {
                            Id = 45,
                            CodiceGri = "306-4 (2020)",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 306 Rifiuti 2020"
                        },
                        new
                        {
                            Id = 46,
                            CodiceGri = "306-5 (2020)",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 306 Rifiuti 2020"
                        },
                        new
                        {
                            Id = 47,
                            CodiceGri = "306-3 (2016)",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 306 Scarichi idrici e rifiuti 2016 "
                        },
                        new
                        {
                            Id = 48,
                            CodiceGri = "306-4 (2016)",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 306 Scarichi idrici e rifiuti 2016 "
                        },
                        new
                        {
                            Id = 49,
                            CodiceGri = "306-5 (2016)",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 306 Scarichi idrici e rifiuti 2016"
                        },
                        new
                        {
                            Id = 50,
                            CodiceGri = "308-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 308 Valutazione ambientale dei fornitori 2016"
                        },
                        new
                        {
                            Id = 51,
                            CodiceGri = "308-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 308 Valutazione ambientale dei fornitori 2016"
                        },
                        new
                        {
                            Id = 52,
                            CodiceGri = "401-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 401 Occupazione 2016"
                        },
                        new
                        {
                            Id = 53,
                            CodiceGri = "401-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 401 Occupazione 2016"
                        },
                        new
                        {
                            Id = 54,
                            CodiceGri = "401-3",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 401 Occupazione 2016"
                        },
                        new
                        {
                            Id = 55,
                            CodiceGri = "402-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 402 Gestione del lavoro e delle relazioni sindacali 2016"
                        },
                        new
                        {
                            Id = 56,
                            CodiceGri = "403-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 403 Salute e sicurezza sul lavoro 2018"
                        },
                        new
                        {
                            Id = 57,
                            CodiceGri = "403-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 403 Salute e sicurezza sul lavoro 2018"
                        },
                        new
                        {
                            Id = 58,
                            CodiceGri = "403-3",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 403 Salute e sicurezza sul lavoro 2018"
                        },
                        new
                        {
                            Id = 59,
                            CodiceGri = "403-4",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 403 Salute e sicurezza sul lavoro 2018"
                        },
                        new
                        {
                            Id = 60,
                            CodiceGri = "403-5",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 403 Salute e sicurezza sul lavoro 2018"
                        },
                        new
                        {
                            Id = 61,
                            CodiceGri = "403-6",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 403 Salute e sicurezza sul lavoro 2018"
                        },
                        new
                        {
                            Id = 62,
                            CodiceGri = "403-7",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 403 Salute e sicurezza sul lavoro 2018"
                        },
                        new
                        {
                            Id = 63,
                            CodiceGri = "403-8",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 403 Salute e sicurezza sul lavoro 2018"
                        },
                        new
                        {
                            Id = 64,
                            CodiceGri = "403-9",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 403 Salute e sicurezza sul lavoro 2018"
                        },
                        new
                        {
                            Id = 65,
                            CodiceGri = "403-10",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 403 Salute e sicurezza sul lavoro 2018"
                        },
                        new
                        {
                            Id = 66,
                            CodiceGri = "404-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 404 Formazione e istruzione 2016"
                        },
                        new
                        {
                            Id = 67,
                            CodiceGri = "404-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 404 Formazione e istruzione 2016"
                        },
                        new
                        {
                            Id = 68,
                            CodiceGri = "404-3",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 404 Formazione e istruzione 2016"
                        },
                        new
                        {
                            Id = 69,
                            CodiceGri = "405-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 405 Diversità e pari opportunità 2016"
                        },
                        new
                        {
                            Id = 70,
                            CodiceGri = "405-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 405 Diversità e pari opportunità 2016"
                        },
                        new
                        {
                            Id = 71,
                            CodiceGri = "406-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 406 Non discriminazione 2016"
                        },
                        new
                        {
                            Id = 72,
                            CodiceGri = "407-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 407 Libertà di associazione e contrattazione collettiva 2016"
                        },
                        new
                        {
                            Id = 73,
                            CodiceGri = "408-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 408 Lavoro minorile 2016"
                        },
                        new
                        {
                            Id = 74,
                            CodiceGri = "409-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 409 Lavoro forzato o obbligatorio 2016"
                        },
                        new
                        {
                            Id = 75,
                            CodiceGri = "410-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 410 Pratiche per la sicurezza 2016"
                        },
                        new
                        {
                            Id = 76,
                            CodiceGri = "411-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 411 Diritti dei popoli indigeni 2016"
                        },
                        new
                        {
                            Id = 77,
                            CodiceGri = "413-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 413 Comunità locali 2016"
                        },
                        new
                        {
                            Id = 78,
                            CodiceGri = "413-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 413 Comunità locali 2016"
                        },
                        new
                        {
                            Id = 79,
                            CodiceGri = "414-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 414 Valutazione sociale dei fornitori"
                        },
                        new
                        {
                            Id = 80,
                            CodiceGri = "414-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 414 Valutazione sociale dei fornitori"
                        },
                        new
                        {
                            Id = 81,
                            CodiceGri = "415-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 415 Politica pubblica 2016"
                        },
                        new
                        {
                            Id = 82,
                            CodiceGri = "416-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 416 Salute e sicurezza dei clienti 2016"
                        },
                        new
                        {
                            Id = 83,
                            CodiceGri = "416-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 416 Salute e sicurezza dei clienti 2016"
                        },
                        new
                        {
                            Id = 84,
                            CodiceGri = "417-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 417 Marketing ed etichettatura 2016"
                        },
                        new
                        {
                            Id = 85,
                            CodiceGri = "417-2",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 417 Marketing ed etichettatura 2016"
                        },
                        new
                        {
                            Id = 86,
                            CodiceGri = "417-3",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 417 Marketing ed etichettatura 2016"
                        },
                        new
                        {
                            Id = 87,
                            CodiceGri = "418-1",
                            DataCreazione = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataSpegnimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stato = false,
                            Titolo = "GRI 418 Privacy dei clienti 2016"
                        });
                });

            modelBuilder.Entity("Elyze.Data.Gruppo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Attivo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Gruppo", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.Inserimenti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdCampo")
                        .HasColumnType("int");

                    b.Property<int>("IdInserimento")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ValoreCampo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValoreValidato")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdCampo");

                    b.ToTable("Inserimenti", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.InserimentiFissi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DataFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataInizio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataInserimento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataValidazione")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdInserimento")
                        .HasColumnType("int");

                    b.Property<int>("IdMicroArea")
                        .HasColumnType("int");

                    b.Property<string>("IdUtente")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdValidatore")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RepartoId")
                        .HasColumnType("int");

                    b.Property<int>("SocietaId")
                        .HasColumnType("int");

                    b.Property<int?>("Stato")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdMicroArea");

                    b.HasIndex("IdUtente");

                    b.HasIndex("IdValidatore");

                    b.ToTable("InserimentiFissi");
                });

            modelBuilder.Entity("Elyze.Data.Lingue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiglaEstesa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Lingue", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "SYSTEM",
                            Descrizione = "Italia",
                            Sigla = "IT",
                            SiglaEstesa = "it-IT",
                            UpdatedBy = "SYSTEM"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "SYSTEM",
                            Descrizione = "Inglese",
                            Sigla = "EN",
                            SiglaEstesa = "en-EN",
                            UpdatedBy = "SYSTEM"
                        });
                });

            modelBuilder.Entity("Elyze.Data.MicroArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DataCreazione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("Data_Creazione")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<DateTime>("DataSpegnimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("Data_Spegnimento")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdArea")
                        .HasColumnType("int");

                    b.Property<int>("IdGri")
                        .HasColumnType("int")
                        .HasColumnName("Id_Gri");

                    b.Property<int>("IdMicroArea")
                        .HasColumnType("int");

                    b.Property<string>("NomeTabella")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nome_Tabella")
                        .HasColumnOrder(2);

                    b.Property<bool>("Stato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdGri");

                    b.ToTable("MicroArea", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.OperatoreDiConversione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FattoreDiConversione")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int?>("IdOperazione")
                        .HasColumnType("int");

                    b.Property<int?>("IdUnitaDiMisuraArrivo")
                        .HasColumnType("int");

                    b.Property<int?>("IdUnitaDiMisuraPartenza")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdOperazione" }, "IX_OperatoreDiConversione_IdOperazione");

                    b.HasIndex(new[] { "IdUnitaDiMisuraArrivo" }, "IX_OperatoreDiConversione_IdUnitaDiMisuraArrivo");

                    b.HasIndex(new[] { "IdUnitaDiMisuraPartenza" }, "IX_OperatoreDiConversione_IdUnitaDiMisuraPartenza");

                    b.ToTable("OperatoreDiConversione", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.Operazione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatoreDiConversione")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Operazione", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descrizione = "",
                            OperatoreDiConversione = "+"
                        },
                        new
                        {
                            Id = 2,
                            Descrizione = "",
                            OperatoreDiConversione = "-"
                        },
                        new
                        {
                            Id = 3,
                            Descrizione = "",
                            OperatoreDiConversione = "/"
                        },
                        new
                        {
                            Id = 4,
                            Descrizione = "",
                            OperatoreDiConversione = "*"
                        });
                });

            modelBuilder.Entity("Elyze.Data.Reparto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Attivo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StabilimentoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Reparto", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.Repository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SocietaId")
                        .HasColumnType("int");

                    b.Property<string>("Titolo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("SocietaId");

                    b.ToTable("Repository", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.SDG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SDG");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codice = "01",
                            Descrizione = "No poverty",
                            LocalPath = "01-NoPoverty.png"
                        },
                        new
                        {
                            Id = 2,
                            Codice = "02",
                            Descrizione = "Zero hunger",
                            LocalPath = "02-ZeroHunger.png"
                        },
                        new
                        {
                            Id = 3,
                            Codice = "03",
                            Descrizione = "Good health and well being",
                            LocalPath = "03-GoodHealthAndWellBeing.png"
                        },
                        new
                        {
                            Id = 4,
                            Codice = "04",
                            Descrizione = "Quality education",
                            LocalPath = "04-QualityEducation.png"
                        },
                        new
                        {
                            Id = 5,
                            Codice = "05",
                            Descrizione = "Gender equality",
                            LocalPath = "05-GenderEquality.png"
                        },
                        new
                        {
                            Id = 6,
                            Codice = "06",
                            Descrizione = "Clean water and sanitation",
                            LocalPath = "06-CleanWaterAndSanitation.png"
                        },
                        new
                        {
                            Id = 7,
                            Codice = "07",
                            Descrizione = "Affordable and clean energy",
                            LocalPath = "07-AffordableAndCleanEnergy.png"
                        },
                        new
                        {
                            Id = 8,
                            Codice = "08",
                            Descrizione = "Decent work and economy growth",
                            LocalPath = "08-DecentWorkAndEconomyGrowth.png"
                        },
                        new
                        {
                            Id = 9,
                            Codice = "09",
                            Descrizione = "Industry innovation and infrastructure",
                            LocalPath = "09-IndustryInnovationAndInfrastructure.png"
                        },
                        new
                        {
                            Id = 10,
                            Codice = "10",
                            Descrizione = "Reduce inequalities",
                            LocalPath = "10-ReduceInequalities.png"
                        },
                        new
                        {
                            Id = 11,
                            Codice = "11",
                            Descrizione = "Sustainable cities and communities",
                            LocalPath = "11-SustainableCitiesAndCommunities.png"
                        },
                        new
                        {
                            Id = 12,
                            Codice = "12",
                            Descrizione = "Responsible consumption and production",
                            LocalPath = "12-ResponsibleConsumptionAndProduction.png"
                        },
                        new
                        {
                            Id = 13,
                            Codice = "13",
                            Descrizione = "Climate action",
                            LocalPath = "13-ClimateAction.png"
                        },
                        new
                        {
                            Id = 14,
                            Codice = "14",
                            Descrizione = "Life below water",
                            LocalPath = "14-LifeBelowWater.png"
                        },
                        new
                        {
                            Id = 15,
                            Codice = "15",
                            Descrizione = "Life and land",
                            LocalPath = "15-LifeAndLand.png"
                        },
                        new
                        {
                            Id = 16,
                            Codice = "16",
                            Descrizione = "Peace, justice and strong institution",
                            LocalPath = "16-PeaceJusticheAndStrongInsitution.png"
                        },
                        new
                        {
                            Id = 17,
                            Codice = "17",
                            Descrizione = "Partnership for the goals",
                            LocalPath = "17-PartnershipForTheGoals.png"
                        });
                });

            modelBuilder.Entity("Elyze.Data.Sede", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Attivo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsoNazione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SedeN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SocietaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("SocietaId");

                    b.ToTable("Sede", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.Societa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Attivo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("CodiceIsoNazione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GruppoId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("Nazione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("GruppoId");

                    b.ToTable("Societa");
                });

            modelBuilder.Entity("Elyze.Data.StatoSchede", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatoSchede", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.TemplateMail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateCorpo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateOggetto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoMailId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TipoMailId");

                    b.ToTable("TemplateMail");
                });

            modelBuilder.Entity("Elyze.Data.TipologiaMail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipologiaMail");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descrizione = "ResetPassword"
                        });
                });

            modelBuilder.Entity("Elyze.Data.TipologieCampiMicroArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipologieCampiMicroArea");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descrizione = "",
                            Nome = "Decimal"
                        },
                        new
                        {
                            Id = 2,
                            Descrizione = "",
                            Nome = "Integer"
                        },
                        new
                        {
                            Id = 3,
                            Descrizione = "",
                            Nome = "Text"
                        });
                });

            modelBuilder.Entity("Elyze.Data.UnitaMisura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Simbolo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnitaMisura", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.UserArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdArea")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdUserType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserType");

                    b.ToTable("UserArea", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.UserGruppo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdGruppo")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdGruppo");

                    b.HasIndex("IdUser");

                    b.ToTable("UserGruppo");
                });

            modelBuilder.Entity("Elyze.Data.UserReparto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdReparto")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdReparto");

                    b.HasIndex("IdUser");

                    b.ToTable("UserReparto");
                });

            modelBuilder.Entity("Elyze.Data.UserSede", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdSede")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdSede");

                    b.HasIndex("IdUser");

                    b.ToTable("UserSede");
                });

            modelBuilder.Entity("Elyze.Data.UserSocieta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdSocieta")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdSocieta");

                    b.HasIndex("IdUser");

                    b.ToTable("UserSocieta");
                });

            modelBuilder.Entity("Elyze.Data.UserTypesArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypesArea");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Validator"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Compiler"
                        });
                });

            modelBuilder.Entity("Elyze.Data.Valuta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Simbolo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Valuta", (string)null);
                });

            modelBuilder.Entity("Elyze.Data.Area", b =>
                {
                    b.HasOne("Elyze.Data.AreaIcons", "IdIconaAreaNavigation")
                        .WithMany()
                        .HasForeignKey("IdIconaArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.Lingue", "IdLinguaNavigation")
                        .WithMany()
                        .HasForeignKey("IdLingua")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdIconaAreaNavigation");

                    b.Navigation("IdLinguaNavigation");
                });

            modelBuilder.Entity("Elyze.Data.AreaSDG", b =>
                {
                    b.HasOne("Elyze.Data.Area", "IdAreaNavigation")
                        .WithMany()
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.SDG", "IdSdgNavigation")
                        .WithMany()
                        .HasForeignKey("IdSdg")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdAreaNavigation");

                    b.Navigation("IdSdgNavigation");
                });

            modelBuilder.Entity("Elyze.Data.CampiMa", b =>
                {
                    b.HasOne("Elyze.Data.MicroArea", "IdMicroAreaNavigation")
                        .WithMany()
                        .HasForeignKey("IdMicroArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.TipologieCampiMicroArea", "IdTipologiaNavigation")
                        .WithMany()
                        .HasForeignKey("IdTipologia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.UnitaMisura", "IdUDMNavigation")
                        .WithMany()
                        .HasForeignKey("IdUDM")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdMicroAreaNavigation");

                    b.Navigation("IdTipologiaNavigation");

                    b.Navigation("IdUDMNavigation");
                });

            modelBuilder.Entity("Elyze.Data.Inserimenti", b =>
                {
                    b.HasOne("Elyze.Data.CampiMa", "IdCampoNavigation")
                        .WithMany()
                        .HasForeignKey("IdCampo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdCampoNavigation");
                });

            modelBuilder.Entity("Elyze.Data.InserimentiFissi", b =>
                {
                    b.HasOne("Elyze.Data.MicroArea", "IdMicroAreaNavigation")
                        .WithMany()
                        .HasForeignKey("IdMicroArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.AspNetUsers", "IdUtenteNavigation")
                        .WithMany()
                        .HasForeignKey("IdUtente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.AspNetUsers", "IdValidatoreNavigation")
                        .WithMany()
                        .HasForeignKey("IdValidatore");

                    b.Navigation("IdMicroAreaNavigation");

                    b.Navigation("IdUtenteNavigation");

                    b.Navigation("IdValidatoreNavigation");
                });

            modelBuilder.Entity("Elyze.Data.MicroArea", b =>
                {
                    b.HasOne("Elyze.Data.Area", "IdAreaNavigation")
                        .WithMany()
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.Gri", "IdGriNavigation")
                        .WithMany()
                        .HasForeignKey("IdGri")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdAreaNavigation");

                    b.Navigation("IdGriNavigation");
                });

            modelBuilder.Entity("Elyze.Data.OperatoreDiConversione", b =>
                {
                    b.HasOne("Elyze.Data.Operazione", "IdOperazioneNavigation")
                        .WithMany("OperatoreDiConversioneIdOperazione")
                        .HasForeignKey("IdOperazione")
                        .HasConstraintName("FK_OperatoreDiConversione_UnitaMisura_Operazione");

                    b.HasOne("Elyze.Data.UnitaMisura", "IdUnitaDiMisuraArrivoNavigation")
                        .WithMany("OperatoreDiConversioneIdUnitaDiMisuraArrivoNavigations")
                        .HasForeignKey("IdUnitaDiMisuraArrivo")
                        .HasConstraintName("FK_OperatoreDiConversione_UnitaMisura_Arrivo");

                    b.HasOne("Elyze.Data.UnitaMisura", "IdUnitaDiMisuraPartenzaNavigation")
                        .WithMany("OperatoreDiConversioneIdUnitaDiMisuraPartenzaNavigations")
                        .HasForeignKey("IdUnitaDiMisuraPartenza")
                        .HasConstraintName("FK_OperatoreDiConversione_UnitaMisura_Partenza");

                    b.Navigation("IdOperazioneNavigation");

                    b.Navigation("IdUnitaDiMisuraArrivoNavigation");

                    b.Navigation("IdUnitaDiMisuraPartenzaNavigation");
                });

            modelBuilder.Entity("Elyze.Data.Repository", b =>
                {
                    b.HasOne("Elyze.Data.Attachment", "Attachment")
                        .WithMany("Repository")
                        .HasForeignKey("AttachmentId");

                    b.HasOne("Elyze.Data.Societa", "Societa")
                        .WithMany("Repository")
                        .HasForeignKey("SocietaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Societa");
                });

            modelBuilder.Entity("Elyze.Data.Sede", b =>
                {
                    b.HasOne("Elyze.Data.Societa", "SocietaIdNavigation")
                        .WithMany()
                        .HasForeignKey("SocietaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocietaIdNavigation");
                });

            modelBuilder.Entity("Elyze.Data.Societa", b =>
                {
                    b.HasOne("Elyze.Data.Gruppo", "GruppoIdNavigation")
                        .WithMany()
                        .HasForeignKey("GruppoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GruppoIdNavigation");
                });

            modelBuilder.Entity("Elyze.Data.TemplateMail", b =>
                {
                    b.HasOne("Elyze.Data.TipologiaMail", "TipologiaMail")
                        .WithMany("TemplateMails")
                        .HasForeignKey("TipoMailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipologiaMail");
                });

            modelBuilder.Entity("Elyze.Data.UserArea", b =>
                {
                    b.HasOne("Elyze.Data.Area", "IdAreaNavigation")
                        .WithMany()
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.AspNetUsers", "IdUserNavigation")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.UserTypesArea", "IdUserTypeNavigation")
                        .WithMany()
                        .HasForeignKey("IdUserType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdAreaNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdUserTypeNavigation");
                });

            modelBuilder.Entity("Elyze.Data.UserGruppo", b =>
                {
                    b.HasOne("Elyze.Data.Gruppo", "IdGruppoNavigation")
                        .WithMany()
                        .HasForeignKey("IdGruppo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.AspNetUsers", "IdUserNavigation")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdGruppoNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Elyze.Data.UserReparto", b =>
                {
                    b.HasOne("Elyze.Data.Reparto", "IdRepartoNavigation")
                        .WithMany()
                        .HasForeignKey("IdReparto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.AspNetUsers", "IdUserNavigation")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdRepartoNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Elyze.Data.UserSede", b =>
                {
                    b.HasOne("Elyze.Data.Sede", "IdSedeNavigation")
                        .WithMany()
                        .HasForeignKey("IdSede")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.AspNetUsers", "IdUserNavigation")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdSedeNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Elyze.Data.UserSocieta", b =>
                {
                    b.HasOne("Elyze.Data.Societa", "IdSocietaNavigation")
                        .WithMany()
                        .HasForeignKey("IdSocieta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elyze.Data.AspNetUsers", "IdUserNavigation")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdSocietaNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Elyze.Data.Attachment", b =>
                {
                    b.Navigation("Repository");
                });

            modelBuilder.Entity("Elyze.Data.Operazione", b =>
                {
                    b.Navigation("OperatoreDiConversioneIdOperazione");
                });

            modelBuilder.Entity("Elyze.Data.Societa", b =>
                {
                    b.Navigation("Repository");
                });

            modelBuilder.Entity("Elyze.Data.TipologiaMail", b =>
                {
                    b.Navigation("TemplateMails");
                });

            modelBuilder.Entity("Elyze.Data.UnitaMisura", b =>
                {
                    b.Navigation("OperatoreDiConversioneIdUnitaDiMisuraArrivoNavigations");

                    b.Navigation("OperatoreDiConversioneIdUnitaDiMisuraPartenzaNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
